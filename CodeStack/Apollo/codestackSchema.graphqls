# tag
type Tag {
  id: ID!
  name: String!
  problems: [Problem!]!
}

# problem
type Problem {
  id: ID!
  title: String!
  context: String!
  solvedMemberCount: Float!
  tags: [Tag!]!
}

type Member {
  username: ID!
  profileImage: String!
  solvedProblems: [Problem!]!
}

type PageInfo {
  offset: Int!
  limit: Int!
  totalPages: Int!
  totalContents: Int!
}

type ProblemPage {
  data: [Problem!]
  pageInfo: PageInfo!
}

type Language {
  id: ID!
  name: String!
  extension: String!
}

# submission
type Submission {
  id: ID!
  sourceCode: String!
  cpuTime: Float
  memoryUsage: Float
  problemId: Float!
  memberId: Float!
  languageId: Float!
  problem: Problem!
  language: Language!
}

type SubmissionPage {
  data: [Submission!]
  pageInfo: PageInfo!
}

type TagPage {
  data: [Tag!]
  pageInfo: PageInfo!
}

type Query {
  matchMember(username: String!): Member!
  getProblems(
    limit: Float! = 10
    offset: Float! = 0
    sort: String! = "id"
    order: String! = "asc"
  ): ProblemPage!
  getProblemById(id: Float!): Problem!
  getAllLanguage: [Language!]!
  getAllTag(
    limit: Float! = 10
    offset: Float! = 0
    sort: String! = "id"
    order: String! = "asc"
  ): TagPage!
  getAllSubmission(
    limit: Float! = 10
    offset: Float! = 0
    sort: String! = "id"
    order: String! = "asc"
  ): SubmissionPage!
  getSubmissionById(id: Float!): Submission!
}

type Mutation {
  createSubmission(
    problemId: Float!
    languageId: Float!
    sourceCode: String!
  ): Submission!
}
